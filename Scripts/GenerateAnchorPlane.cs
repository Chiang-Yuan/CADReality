using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.XR.iOS;using UnityEngine.UI;//enum ButtonFlag { ERASER, PENCIL, DESELECT };//enum MaterialFlag { WOOD, CONCRETE, CARBON, METAL, BRICK };public class GenerateAnchorPlane : MonoBehaviour{    [SerializeField]    private ARReferenceImage referenceImage;    [SerializeField]    private GameObject prefabToGenerate;    private GameObject imageAnchorGO;    private UnityARAnchorManager ARAnchorManager;    public Slider sliderX;    public Slider sliderZ;    bool start = true;    Vector3 Move;    Quaternion Rotate;    // Use this for initialization    void Start()    {   /*        if (arImageAnchor.referenceImageName == referenceImage.imageName){            ARAnchorManager = new UnityARAnchorManager();            UnityARUtility.InitializePlanePrefab(prefabToGenerate);        }        */        UnityARSessionNativeInterface.ARImageAnchorAddedEvent += AddImageAnchor;        UnityARSessionNativeInterface.ARImageAnchorUpdatedEvent += UpdateImageAnchor;        UnityARSessionNativeInterface.ARImageAnchorRemovedEvent += RemoveImageAnchor;    }    public void UpdatePlane()    {        start = true;    }    public void StopTracking()    {        start = false;    }    public void RemovePlane()    {        start = false;        if (imageAnchorGO)        {            Debug.Log("RemoveImageAnchor", gameObject);            Destroy(imageAnchorGO);        }    }    public bool isUpdate(){        return start;    }    public void AddPlane()    {        UnityARSessionNativeInterface.ARImageAnchorAddedEvent += AddImageAnchor;        UnityARSessionNativeInterface.ARImageAnchorUpdatedEvent += UpdateImageAnchor;        UnityARSessionNativeInterface.ARImageAnchorRemovedEvent += RemoveImageAnchor;    }    void AddImageAnchor(ARImageAnchor arImageAnchor)    {        Debug.LogFormat("image anchor added[{0}] : tracked => {1}", arImageAnchor.identifier, arImageAnchor.isTracked);        if (arImageAnchor.referenceImageName == referenceImage.imageName)        {            Debug.Log("AddImageAnchor", gameObject);            Vector3 position = UnityARMatrixOps.GetPosition(arImageAnchor.transform);            Quaternion rotation = UnityARMatrixOps.GetRotation(arImageAnchor.transform);            imageAnchorGO = Instantiate(prefabToGenerate, position, rotation);            /*            ARAnchorManager = new UnityARAnchorManager();            UnityARUtility.InitializePlanePrefab(prefabToGenerate);*/        }    }    void UpdateImageAnchor(ARImageAnchor arImageAnchor)    {        Debug.LogFormat("image anchor updated[{0}] : tracked => {1}", arImageAnchor.identifier, arImageAnchor.isTracked);        if (arImageAnchor.referenceImageName == referenceImage.imageName && start)        {            Debug.Log("UpdateImageAnchor", gameObject);            if (arImageAnchor.isTracked)            {                if (!imageAnchorGO.activeSelf)                {                    imageAnchorGO.SetActive(true);                }                Move = UnityARMatrixOps.GetPosition(arImageAnchor.transform) - imageAnchorGO.transform.position;                Rotate = imageAnchorGO.transform.rotation;                imageAnchorGO.transform.position = UnityARMatrixOps.GetPosition(arImageAnchor.transform);                imageAnchorGO.transform.rotation = UnityARMatrixOps.GetRotation(arImageAnchor.transform);                //Line.GetGameobjects(imageAnchorGO.transform.position, imageAnchorGO.transform.rotation);            }            else if (imageAnchorGO.activeSelf)            {                imageAnchorGO.SetActive(false);            }        }    }    void RemoveImageAnchor(ARImageAnchor arImageAnchor)    {        Debug.LogFormat("image anchor removed[{0}] : tracked => {1}", arImageAnchor.identifier, arImageAnchor.isTracked);        if (imageAnchorGO)        {            Debug.Log("RemoveImageAnchor", gameObject);            Destroy(imageAnchorGO);        }    }    void OnDestroy()    {        UnityARSessionNativeInterface.ARImageAnchorAddedEvent -= AddImageAnchor;        UnityARSessionNativeInterface.ARImageAnchorUpdatedEvent -= UpdateImageAnchor;        UnityARSessionNativeInterface.ARImageAnchorRemovedEvent -= RemoveImageAnchor;    }    void OnGUI()    {        IEnumerable<ARPlaneAnchorGameObject> arpags = ARAnchorManager.GetCurrentPlaneAnchors();        foreach (var planeAnchor in arpags)        {            //ARPlaneAnchor ap = planeAnchor;            //GUI.Box (new Rect (100, 100, 800, 60), string.Format ("Center: x:{0}, y:{1}, z:{2}", ap.center.x, ap.center.y, ap.center.z));            //GUI.Box(new Rect(100, 200, 800, 60), string.Format ("Extent: x:{0}, y:{1}, z:{2}", ap.extent.x, ap.extent.y, ap.extent.z));        }    }    // Update is called once per frame    void Update()    {        imageAnchorGO.transform.localScale = new Vector3(sliderX.value, 1, sliderZ.value);    }    public Vector3 getPosition()    {        Debug.Log("GetPosition");        return Move;    }    public Quaternion getQuaternion()    {        Debug.Log("GetRotation");        return Rotate;    }}    /* -------------------------------------------------- * Test Line Inspector * --------------------------------------------------     public GameObject Line;    public Slider slider;    GameObject newLine;    public Material Wood;    public Material Concrete;    public Material Carbon;    public Material Brick;    public Material Metal;    Material MaterialChange;    //GenerateAnchorPlane anchorplane;    private ButtonFlag buttonFlag;    private MaterialFlag materialflag;    /* --------------------------------------------------     * Public Function     * --------------------------------------------------     public void clickPencilButton()    {        buttonFlag = ButtonFlag.PENCIL;    }    public void clickConcreteButton()    {        materialflag = MaterialFlag.CONCRETE;    }    public void clickWoodButton()    {        materialflag = MaterialFlag.WOOD;    }    public void clickCarbonButton()    {        materialflag = MaterialFlag.CARBON;    }    public void clickBrickButton()    {        materialflag = MaterialFlag.BRICK;    }    public void clickMetalButton()    {        materialflag = MaterialFlag.METAL;    }    public void clickEraserButton()    {        buttonFlag = ButtonFlag.ERASER;    }    public void clickDoneButton()    {        buttonFlag = ButtonFlag.DESELECT;        //CancelInvoke();        foreach (Transform iter in transform)        {            iter.GetComponent<CylinderLine>().setState("INACTIVE");        }    }    // Update is called once per frame    void Update()    {        imageAnchorGO.transform.localScale = new Vector3(sliderX.value, 1, sliderZ.value);        if (buttonFlag == ButtonFlag.PENCIL) Pencil(MaterialChange, slider);        if (materialflag == MaterialFlag.WOOD) MaterialChange = Wood;        if (materialflag == MaterialFlag.CARBON) MaterialChange = Carbon;        if (materialflag == MaterialFlag.BRICK) MaterialChange = Brick;        if (materialflag == MaterialFlag.METAL) MaterialChange = Metal;        if (materialflag == MaterialFlag.CONCRETE) MaterialChange = Concrete;        if (buttonFlag == ButtonFlag.ERASER) Eraser();        if (FindObjectsOfType<GameObject>() != null)        {            Debug.Log("Select Lines");            newLine.transform.position += Move;            newLine.transform.rotation = Rotate;            /*            foreach (CylinderLine gameObj in FindObjectsOfType<CylinderLine>())            {                Debug.Log("Transforming Lines");                gameObj.transform.position = anchorplane.getPosition();                gameObj.transform.rotation = anchorplane.getQuaternion();            }        }    }    /* --------------------------------------------------    * Private Function    * --------------------------------------------------     private void Pencil(Material material, Slider mainslider)    {        if ((Input.touchCount > 0 && Input.GetTouch(0).phase == TouchPhase.Began)            || (Input.GetMouseButtonDown(0)))        {            var Ray = Camera.main.ScreenPointToRay(Input.GetTouch(0).position);            RaycastHit hit;            if (Physics.Raycast(Ray, out hit))            {                newLine = Instantiate(Line, transform.InverseTransformPoint(hit.collider.transform.position), Quaternion.identity, transform);                newLine.GetComponent<Renderer>().material = material;                newLine.transform.localScale = new Vector3(mainslider.value, 0.001f, mainslider.value);            }        }    }    private void Eraser()    {        if (((Input.touchCount > 0 && Input.GetTouch(0).phase == TouchPhase.Moved)            || (Input.GetMouseButton(0))))        {            var Ray = Camera.main.ScreenPointToRay(Input.GetTouch(0).position);            RaycastHit hit;            if (Physics.Raycast(Ray, out hit))            {                hit.collider.GetComponent<CylinderLine>().setState("DELETE");            }        }    }}*/