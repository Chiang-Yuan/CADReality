using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.XR.iOS;using UnityEngine.UI;enum FurnitureFlag { SINK, TOILET, DESELECT, ERASER };public class PlaceFurniture : MonoBehaviour{    public GameObject Sink;    public GameObject Toilet;
    public GenerateAnchorPlane anchorplane;    private FurnitureFlag buttonFlag;    public void clickPlaceToiletButton()    {        Debug.Log("clickPlaceBedButton", gameObject);        buttonFlag = FurnitureFlag.TOILET;        //InvokeRepeating("PlaceBed", 0f, 0.01f);    }

    public void clickPlaceSinkButton()    {        Debug.Log("clickPlaceBedButton", gameObject);        buttonFlag = FurnitureFlag.SINK;
        //InvokeRepeating("PlaceBed", 0f, 0.01f);
    }    private void Update()    {        if (buttonFlag == FurnitureFlag.TOILET) PlaceToilet();        if (buttonFlag == FurnitureFlag.SINK) PlaceSink();        if (buttonFlag == FurnitureFlag.ERASER) Erase();

        if (FindObjectsOfType<Furniture>() != null && anchorplane.isUpdate())        {            Debug.Log("Select Toilets");            foreach (Furniture gameObj in FindObjectsOfType<Furniture>())            {                Debug.Log("Transforming Toilets");                gameObj.transform.position += anchorplane.getPosition();                gameObj.transform.rotation = anchorplane.getQuaternion();            }        }    }    public void clickEraseButton()    {        Debug.Log("clickEraseBedButton", gameObject);        buttonFlag = FurnitureFlag.ERASER;        //InvokeRepeating("EraseBed", 0f, 0.01f);    }    public void clickDoneButton()    {        Debug.Log("clickDoneButton", gameObject);        buttonFlag = FurnitureFlag.DESELECT;        foreach (Transform iter in transform)        {            iter.GetComponent<Furniture>().setState("INACTIVE");        }
        //CancelInvoke("PlaceBed");
    }    void PlaceToilet()    {        Debug.Log("PlaceToilet", gameObject);        if (Input.touchCount > 0 && Input.GetTouch(0).phase == TouchPhase.Began)        {            Debug.Log("PlaceRay", gameObject);            var Ray = Camera.main.ScreenPointToRay(Input.GetTouch(0).position);            RaycastHit hit;            if (Physics.Raycast(Ray, out hit))            {                Debug.Log("PlaceInstatiate", gameObject);                Instantiate(Toilet, hit.point, Quaternion.identity);            }        }    }

    void PlaceSink()    {        Debug.Log("PlaceToilet", gameObject);        if (Input.touchCount > 0 && Input.GetTouch(0).phase == TouchPhase.Began)        {            Debug.Log("PlaceRay", gameObject);            var Ray = Camera.main.ScreenPointToRay(Input.GetTouch(0).position);            RaycastHit hit;            if (Physics.Raycast(Ray, out hit))            {                Debug.Log("PlaceInstatiate", gameObject);                Instantiate(Sink, hit.point, Quaternion.identity);            }        }    }    void Erase(){        if (Input.touchCount > 0 && Input.GetTouch(0).phase == TouchPhase.Moved)        {            Debug.Log("EraseRay", gameObject);            var Ray = Camera.main.ScreenPointToRay(Input.GetTouch(0).position);            RaycastHit hit;            if (Physics.Raycast(Ray, out hit))            {                Debug.Log("EraseDestroy", gameObject);                hit.collider.GetComponent<Furniture>().setState("DELETE");            }        }    }}