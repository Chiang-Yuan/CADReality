/* -*- C# -*------------------------------------------------------------- *  LineInspector.cs *   *   *  Copyright version 3.1 (2018/12) Chiang Yuan & EricChiuBird *   *      v_3.1   |   add eraser button *      v_3.0   |   add Begin() and End() function *      v_2.0   |   add Input.TouchCount & Input.GetTouch condition in  *                  Update() * ---------------------------------------------------------------------- */using System;using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.XR.iOS;using UnityEngine.UI;enum ButtonFlag { ERASER, PENCIL, DESELECT, POLYGON, CIRCLE, EXTRUDE };enum MaterialFlag { WOOD, CONCRETE, CARBON, METAL, BRICK };public class LineInspector : MonoBehaviour{    public GameObject Line;    public Slider slider;    public Material Wood;    public Material Concrete;    public Material Carbon;    public Material Brick;    public Material Metal;    public GenerateAnchorPlane anchorplane;    Material MaterialChange;    private ButtonFlag buttonFlag;    private MaterialFlag materialflag;    /* --------------------------------------------------     * Public Function     * -------------------------------------------------- */    public void ClickPencilButton()    {        buttonFlag = ButtonFlag.PENCIL;    }    public void ClickConcreteButton()    {        materialflag = MaterialFlag.CONCRETE;    }    public void ClickWoodButton()    {        materialflag = MaterialFlag.WOOD;    }    public void ClickCarbonButton()    {        materialflag = MaterialFlag.CARBON;    }    public void ClickBrickButton()    {        materialflag = MaterialFlag.BRICK;    }       public void ClickMetalButton()    {        materialflag = MaterialFlag.METAL;    }    public void ClickEraserButton()    {        buttonFlag = ButtonFlag.ERASER;    }    public void ClickDoneButton()    {        buttonFlag = ButtonFlag.DESELECT;        //CancelInvoke();        foreach (Transform iter in transform)        {            iter.GetComponent<CylinderLine>().setState("INACTIVE");        }    }    // Use this for initialization    void Start()    {    }    // Update is called once per frame    void Update()    {        if (buttonFlag == ButtonFlag.PENCIL) Pencil(MaterialChange, slider);        if (materialflag == MaterialFlag.WOOD) MaterialChange = Wood;        if (materialflag == MaterialFlag.CARBON) MaterialChange = Carbon;        if (materialflag == MaterialFlag.BRICK) MaterialChange = Brick;        if (materialflag == MaterialFlag.METAL) MaterialChange = Metal;        if (materialflag == MaterialFlag.CONCRETE) MaterialChange = Concrete;        if (buttonFlag == ButtonFlag.ERASER) Eraser();        if (FindObjectsOfType<CylinderLine>() != null && anchorplane.isUpdate())        {            Debug.Log("Select Lines");            foreach (CylinderLine gameObj in FindObjectsOfType<CylinderLine>())            {                Debug.Log("Transforming Lines");                gameObj.transform.position += anchorplane.getPosition();                gameObj.transform.rotation = anchorplane.getQuaternion();            }        }    }    /* --------------------------------------------------    * Private Function    * -------------------------------------------------- */    private void Pencil(Material material, Slider mainslider)    {        if ((Input.touchCount > 0 && Input.GetTouch(0).phase == TouchPhase.Began)            || (Input.GetMouseButtonDown(0)))        {            var Ray = Camera.main.ScreenPointToRay(Input.GetTouch(0).position);            RaycastHit hit;            if (Physics.Raycast(Ray, out hit))            {                GameObject newLine = Instantiate(Line, hit.point, Quaternion.identity, transform);                newLine.GetComponent<Renderer>().material = material;                newLine.transform.localScale = new Vector3(mainslider.value, 0.001f, mainslider.value);            }        }    }    private void Eraser()    {        if (((Input.touchCount > 0 && Input.GetTouch(0).phase == TouchPhase.Moved)            || (Input.GetMouseButton(0))))        {            var Ray = Camera.main.ScreenPointToRay(Input.GetTouch(0).position);            RaycastHit hit;            if (Physics.Raycast(Ray, out hit))            {                hit.collider.GetComponent<CylinderLine>().setState("DELETE");            }        }    }}